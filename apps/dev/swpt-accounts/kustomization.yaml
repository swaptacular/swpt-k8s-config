apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

# The name of the namespace could be changed. In this case, the
# "namespace.yaml" file should be changed as well.
namespace: swpt-accounts

secretGenerator:
- name: spilo-env-secret
  files:
  # Run `openssl rand -base64 32` to generate a random encryption key.
  - WALG_LIBSODIUM_KEY=spilo-walg-libsodium-key.encrypted

  # The "password" for the S3 service.
  - AWS_SECRET_ACCESS_KEY=spilo-aws-secret-access-key.encrypted

  literals:
  # The "username" for the S3 service.
  - AWS_ACCESS_KEY_ID=console

  # When Amazon S3 is used, this specifies the AWS region. In this
  # case, specifying `AWS_ENDPOINT` should not be necessary.
  - AWS_REGION=us-east-1

  # The endpoint for the S3 service.
  - AWS_ENDPOINT=https://minio.minio-tenant.svc.cluster.local:443

  # This specifies the trusted CA for the local MinIO S3 server. This
  # should not be necessary for "proper" S3 providers.
  - WALG_S3_CA_CERT_FILE=/certs/minio/ca.crt

  options:
    disableNameSuffixHash: true
    labels:
      app.kubernetes.io/name: swpt-accounts
      application: spilo
      team: swpt
  type: Opaque

- name: db-owner-credentials
  files:
  # A SOPS-encrypted file containing the password for the "db_owner"
  # user on all Postgres clusters which this application will create.
  # Once created, the password must not be changed.
  - password=postgres-cluster-password.encrypted

  literals:
  - username=db_owner
  options:
    disableNameSuffixHash: true
    labels:
      app.kubernetes.io/name: swpt-accounts
  type: Opaque

- name: git-pull-ssh-ids
  files:
  # A SOPS-encrypted file containing the SSH private key used to
  # authenticate to the Git server.
  #
  # Run `ssh-keygen -f id_rsa -N ''` to generate a new SSH
  # private/public key pair. This will create two files:
  # 1. "id_rsa", containing the unencrypted SSH private key;
  # 2. "id_rsa.pub", containing the SSH public key.
  #
  # Then use SOPS to encrypt the "id_rsa" file. The resulting
  # encrypted file must be named "id_rsa.encrypted". For example, you
  # may run: `sops encrypt id_rsa > id_rsa.encrypted`.
  - id_rsa=git-pull-ssh-ids/id_rsa.encrypted

  # The "id_rsa.pub" file generated in the previous step. (See the
  # previous comment.)
  - id_rsa.pub=git-pull-ssh-ids/id_rsa.pub

  # The certificate for the "id_rsa.pub" key. To create this
  # certificate, run this command:
  #
  # $ ssh-keygen -s <path-to-root-ca-private-key-file> -I git-pull -n git id_rsa.pub
  #
  # Here "<path-to-root-ca-private-key-file>" is the path to your
  # Swaptacular node's private key, and "id_rsa.pub" is the public key
  # generated in the previous steps. (See previous comments.)
  - id_rsa-cert.pub=git-pull-ssh-ids/id_rsa-cert.pub
  options:
    labels:
      app.kubernetes.io/name: swpt-accounts
  type: Opaque

- name: server-certificate
  files:
  # The server certificate PEM file. This certificate will be used to
  # authenticate before peer nodes. On how to generate a server
  # certificate, check https://github.com/swaptacular/swpt_ca_scripts
  - server.crt=server.crt

  # A SOPS-encrypted file containing the private key for the server
  # certificate. This private key will be used to authenticate before
  # peer nodes. (See the previous comment.)
  #
  # To SOPS-encrypt the private key, you may use this command:
  #
  # $ sops encrypt server.key > server.key.encrypted
  - server.key=server.key.encrypted
  options:
    labels:
      app.kubernetes.io/name: swpt-accounts
  type: Opaque

configMapGenerator:
- name: apiproxy-config
  files:
  # The configuration file for the "apiproxy".
  #
  # Each line in the configuration file should start with a route
  # specifier, followed by at least one space, followed by a web
  # server URL (only "http://" server URLs are supported). Route
  # specifiers consist of zero or more 0s or 1s, separated by dots,
  # ending with a hash symbol ("#"). An example configuration file:
  #
  # 0.# http://first-server:8001
  # 1.# http://second-server:8001
  #
  # or, for a sigle server:
  #
  # # http://the-only-server
  #
  # Note that the route specifiers in the configuration file must
  # cover all possible bit masks. For example, the following
  # configuration file is invalid:
  #
  # 0.# http://some-server
  #
  # because it does not cover sharding keys starting with a
  # binary "1".
  - apiproxy.conf=apiproxy.conf

  options:
    labels:
      app.kubernetes.io/name: swpt-accounts

replicas:
- name: apiproxy
  count: 1
- name: stomp-server
  count: 1

images:
- name: swpt-accounts
  newName: ghcr.io/swaptacular/swpt_accounts
  newTag: 2.3.2
- name: swpt-apiproxy
  newName: ghcr.io/swaptacular/swpt_apiproxy
  newTag: 1.2.2
- name: swpt-nfs-server
  newName: ghcr.io/swaptacular/swpt_nfs_server
  newTag: 0.1.4
- name: swpt-stomp
  newName: ghcr.io/swaptacular/swpt_stomp
  newTag: 2.3.0
- name: nginx
  newName: docker.io/nginx
  newTag: 1.26.3-alpine3.20

resources:
- ../../base/swpt-accounts/
- namespace.yaml
- shards/

patches:
- path: patches/broker.yaml
- path: patches/apiproxy-deployment.yaml
  target:
    group: apps
    kind: Deployment
    name: apiproxy
    version: v1
- path: patches/nfs-server-deployment.yaml
  target:
    group: apps
    kind: Deployment
    name: nfs-server
    version: v1
- path: patches/stomp-server-deployment.yaml
  target:
    group: apps
    kind: Deployment
    name: stomp-server
    version: v1
