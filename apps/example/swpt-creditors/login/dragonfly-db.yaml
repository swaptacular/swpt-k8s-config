apiVersion: dragonflydb.io/v1alpha1
kind: Dragonfly
metadata:
  name: dragonfly-db
spec:
  # Specifies the "Dragonfly" OCI image to use.
  #
  image: ghcr.io/swaptacular/dragonfly@sha256:32b1f065a8ba99842b4ffe6d854a9a50fc0e47e65b5cdd7f5d6244b0f3b4c9c8

  # Specifies the number of Dragonfly server instances. It is
  # recommended to be at least 2. If set to 1, only a primary server
  # will run, with no replicas.
  #
  replicas: 1

  # Specifies how often a snapshot should be made, and the size of the
  # persistent volumes (PVs) on which the snapshots will be stored.
  #
  # IMPORTANT NOTE: Once the persistent volume claims have been
  # created, increasing the storage size here will not automatically
  # expand the PVs. To expand the PVs, after increasing the storage
  # size here, and applying the changes to the cluster, follow this
  # procedure:
  #
  # 1. For each PVC in the StatefulSet, run:
  #
  #    $ kubectl edit pvc <name>
  #
  #    and increase the capacity of each PVC.
  #
  # 2. Run:
  #
  #    $ kubectl delete sts --cascade=orphan dragonfly-db
  #
  #    to delete the StatefulSet and leave its pods.
  #
  # 3. Wait until the Dragonfly operator recreates the StatefulSet
  #    automatically.
  #
  # 4. During the next pod rollout, pods' PVs will be resized. To
  #    trigger a pod rollout, you may change the
  #    "pods-restart-attempt" annotation (see bellow), or run:
  #
  #    $ kubectl rollout restart sts dragonfly-db
  #
  snapshot:
    cron: "*/5 * * * *"

    persistentVolumeClaimSpec:
      accessModes:
      - ReadWriteOnce

      # # `storageClassName` defines the name of the Kubernetes storage
      # # class to draw the persistent volume from. If your cluster does
      # # not have a default StorageClass, this property must be set.
      # # Otherwise it is optional.
      # #
      # storageClassName: fast

      resources:
        requests:
          # The capacity of the persistent volume, expressed as a
          # Kubernetes resource quantity. Since increasing the
          # capacity later may not be trivial, make this big enough,
          # to be on the safe side (100Gi seem reasonable).
          #
          storage: 1Gi

  # Specifies Kubernetes memory and CPU requests and limits. It is
  # highly recommended that the memory request is the same as the
  # memory limit. While the number of users is small, you will not
  # need a lot of memory and CPU here. Also, you can easily request
  # more memory and CPU as the number of users increases. In
  # production, 1Gi memory and 1000m CPU could be a good start.
  #
  resources:
    requests:
      cpu: 100m
      memory: 350Mi
    limits:
      cpu: 1000m
      memory: 350Mi

  # Specifies Kubernetes tolerations. If you add the respective taint
  # to a set of nodes in your Kubernetes cluster, the DragonflyDB
  # instances will be scheduled to those nodes. To ensure correct
  # scheduling, you must also add the corresponding label to each one
  # of the tainted nodes. For example, if you added the
  # "swpt-dragonfly-db=swpt-creditors:NoSchedule" taint, you must also
  # add the "swpt-dragonfly-db=swpt-creditors" label to the tainted
  # node. If you do not add the taint to any node, the DragonflyDB
  # instances will be scheduled to any of the suitable nodes.
  #
  tolerations:
  - key: "swpt-dragonfly-db"
    operator: "Equal"
    value: "swpt-creditors"
    effect: "NoSchedule"

  annotations:
    # The value can be changed to force pods restart.
    #
    pods-restart-attempt: attempt-0
