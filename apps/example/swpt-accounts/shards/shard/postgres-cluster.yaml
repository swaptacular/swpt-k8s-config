apiVersion: "acid.zalan.do/v1"
kind: postgresql
metadata:
  name: db # must be "db"
spec:
  # Specifies the "spilo" OCI image to use.
  dockerImage: ghcr.io/swaptacular/spilo-17@sha256:23861da069941ff5345e6a97455e60a63fc2f16c97857da8f85560370726cbe7
  # Specifies the disk space allocated for the database. The value
  # must not be decreased.
  volume:
    # # `storageClass` defines the name of the Kubernetes storage class
    # # to draw the persistent volume from. If your cluster does not
    # # have a default StorageClass, this property must be set.
    # # Otherwise it is optional.
    # storageClass: fast
    # The capacity of the persistent volume, expressed as a Kubernetes
    # resource quantity. If the storage class supports resizing, you
    # will be able to increase the capacity simply by increasing this
    # value later (20Gi should be enough for a start).
    size: 1Gi
  # Specifies Kubernetes memory and CPU requests and limits. It is
  # recommended that the memory request is the same as the memory
  # limit. Good minimum values for production are: memory requests
  # 2Gi, memory limit 2Gi, CPU request 1000m, CPU limit 2000m.
  resources:
    requests:
      cpu: 10m
      memory: 350Mi
    limits:
      cpu: 500m
      memory: 350Mi
  # Specifies the number of PosgreSQL server instances in the cluster.
  # Must be between 1 and 3. It is recommended to be at least 2 in
  # production.
  numberOfInstances: 1
  env:
    # You can change the value of this variable to trigger a restart of
    # the PosgreSQL cluster.
    #
    - name: pg_cluster_restart_attempt
      value: attempt-0
  # # Uncommenting the next lines will create a standby cluster from
  # # the S3 backup. The path must be changed accordingly. Once the
  # # standby cluster has been sycnronized, commenting the lines again
  # # will detach the standby cluster from the primary cluster.
  # standby:
  #   s3_wal_path: "s3://swpt/spilo/swpt-accounts-db-01/wal/17"
  teamId: swpt
  postgresql:
    version: "17"
  users:
    db_owner: []
  databases:
    db: db_owner
